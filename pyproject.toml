[project]
name = "contentful"
dynamic = ["version"]
description = "Contentful Delivery API Client"
long_description = "README.rst"
long_description_content_type = "text/x-rst"
authors = [{name = "Contentful GmbH", email="python@contentful.com"}]
dependencies = [
    "requests>=2.31.0,<3.0",
    "python-dateutil>=2.8.2"
]
requires-python = ">=3.9"
readme = "README.rst"
license = {text = "MIT"}
keywords = ["contentful", "cms", "content"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[project.urls]
Homepage = "https://github.com/contentful/contentful.py"
Documentation = "https://contentful.github.io/contentful.py"
Repository = "https://github.com/contentful/contentful.py"
Issues = "https://github.com/contentful/contentful.py/issues"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
version = {source = "file", path = "contentful/__init__.py"}
includes = ["contentful"]
python = {version = ">=3.9,<4.0"}

[tool.pdm.scripts]
clean = {composite = ["clean-build", "clean-pyc", "clean-test"], help = "Remove all build, test, coverage and Python artifacts"}
clean-build = {shell = "rm -rf build/ dist/ *.egg-info", help = "Remove build artifacts"}
clean-pyc = {shell = """
    find . -name '*.pyc' -exec rm -f {} +
    find . -name '*.pyo' -exec rm -f {} +
    find . -name '*~' -exec rm -f {} +
    find . -name '__pycache__' -exec rm -fr {} +
    """, help = "Remove Python file artifacts"}
clean-test = {shell = """
    rm -fr .tox/
    rm -f .coverage
    rm -fr htmlcov/
    """, help = "Remove test and coverage artifacts"}
lint = {cmd = "flake8 .", help = "Run flake8 linter"}
test = { cmd = "python -m unittest discover", help = "Run tests with unittest" }
test-all = {shell = "tox", help = "Run tests on all Python versions with tox"}
coverage = { cmd = "coverage run --source contentful runtests.py", help = "Run tests with coverage"}
docs = {shell = """
    rm -f _docs/contentful.rst
    rm -f _docs/modules.rst
    rm -rf _docs/_build/*
    sphinx-apidoc -o _docs/ contentful
    make -C _docs html
    cp _docs/LICENSE _docs/_build/html/
    rm -rf docs
    cp -r _docs/_build/html docs
    open docs/index.html
    """, help = "Generate Sphinx HTML documentation, including API docs", env = {SPHINXOPTS = "", SPHINXBUILD = "sphinx-build", PAPER = "", BUILDDIR = "_build",PAPEROPT_a4 = "-D latex_paper_size=a4", PAPEROPT_letter = "-D latex_paper_size=letter", ALLSPHINXOPTS = "-d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .", I18NSPHINXOPTS="$(PAPEROPT_$(PAPER)) $(SPHINXOPTS) ."}}
git-docs = {composite = ["docs", "git add docs", "git commit --amend -C HEAD"], help = "Generate and commit documentation"}
push-tags = {shell = """
    VERSION=$(pdm show --version)
    git tag -a $VERSION -m "version $VERSION"
    git push --tags
    git push
    """, help = "Push version tags to GitHub"}
release = {composite = ["clean", "git-docs", "pdm publish", "push-tags"], help = "Package and upload a release"}

[tool.coverage.run]
source = ["contentful"]
branch = true
command_line = "-m unittest discover"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]

[dependency-groups]
docs = [
    "Sphinx>=6.2.1",
    "sphinxcontrib-websupport>=1.2.4",
    "tox",
]
test = [
    "vcrpy>=4.3.1",
    "coverage>=6.5.0",
    "flake8>=6.1.0",
    "requests-mock>=1.11.0",
    "PyYAML>=6.0.1",
    "tox>=4.23.2",
]
